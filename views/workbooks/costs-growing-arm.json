{
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workbookDisplayName": {
      "type": "string",
      "defaultValue": "Costs Growing",
      "metadata": {
        "description": "The friendly name for the workbook that is used in the Gallery or Saved List.  This name must be unique within a resource group."
      }
    },
    "workbookType": {
      "type": "string",
      "defaultValue": "workbook",
      "metadata": {
        "description": "The gallery that the workbook will been shown under. Supported values include workbook, tsg, etc. Usually, this is 'workbook'"
      }
    },
    "workbookSourceId": {
      "type": "string",
      "metadata": {
        "description": "The id of resource instance to which the workbook will be associated"
      }
    },
    "workbookId": {
      "type": "string",
      "defaultValue": "81afe6eb-8e9e-4315-811c-89b5de245c9a",
      "metadata": {
        "description": "The unique guid for this workbook instance"
      }
    }
  },
  "resources": [
    {
      "name": "[parameters('workbookId')]",
      "type": "microsoft.insights/workbooks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-06-17-preview",
      "dependsOn": [],
      "kind": "shared",
      "properties": {
        "displayName": "[parameters('workbookDisplayName')]",
        "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"### Outliers/growing costs conditions\"},\"customWidth\":\"50\",\"name\":\"text - 5\"},{\"type\":1,\"content\":{\"json\":\"### Filters\"},\"customWidth\":\"50\",\"name\":\"text - 5 - Copy\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"017ba09e-f6c5-496e-bc96-b7cfc09cf561\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"CostTimeRange\",\"label\":\"Cost Time Range\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":604800000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":1209600000}},{\"id\":\"85603c03-1d4b-474b-9cdb-9ba97192fc9e\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"InstanceMinCost\",\"label\":\"Min. daily cost\",\"type\":1,\"description\":\"The minimum cost to be considered for an instance to be reported\",\"isRequired\":true,\"value\":\"1\",\"typeSettings\":{\"paramValidationRules\":[{\"regExp\":\"^[1-9][0-9]*$\",\"match\":true,\"message\":\"Must be an integer greater than 0\"}]},\"timeContext\":{\"durationMs\":0}},{\"id\":\"5cf46ddd-b223-4333-a025-65c79eb7ee78\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"GrowthPercentage\",\"label\":\"Growth (%)\",\"type\":1,\"description\":\"Cost growth from start to end date\",\"isRequired\":true,\"value\":\"1\",\"typeSettings\":{\"paramValidationRules\":[{\"regExp\":\"^-?[0-9][0-9]*$\",\"match\":true,\"message\":\"Must be an integer\"}]},\"timeContext\":{\"durationMs\":0}},{\"id\":\"af718458-abd1-4608-85eb-ae60152caa13\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TopN\",\"label\":\"Top #\",\"type\":1,\"isRequired\":true,\"value\":\"20\",\"timeContext\":{\"durationMs\":0}},{\"id\":\"593f1b72-8b40-4f4e-a9fa-e33a3813f898\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"CostOption\",\"label\":\"Costs algorithm\",\"type\":2,\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[]},\"jsonData\":\"[{ \\\"value\\\": \\\"ActualCosts\\\", \\\"label\\\": \\\"Actual costs\\\", \\\"selected\\\": true}, { \\\"value\\\": \\\"RIsAsCosts\\\", \\\"label\\\": \\\"RIs as costs\\\"}]\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"name\":\"parameters - 1\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"value::all\"],\"parameters\":[{\"id\":\"b48a696e-cf64-450b-a7cc-9e0a5e457170\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"SelectedSubscriptions\",\"label\":\"Subscription\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"resourcecontainers\\r\\n| where type =~ 'microsoft.resources/subscriptions'\\r\\n| project subscriptionId, name\",\"crossComponentResources\":[\"value::all\"],\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"customWidth\":\"50\",\"name\":\"parameters - 7\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let CostStartIndex = 1;\\r\\nlet GrowthFactor = 1 + todouble({GrowthPercentage}) / 100;\\r\\nlet SubscriptionSeries = materialize(AzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage' and SubscriptionGuid_g in ({SelectedSubscriptions:value})\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by SubscriptionGuid_g, UsageDate_t\\r\\n| order by UsageDate_t asc\\r\\n| make-series Cost=sum(InstanceCost) on UsageDate_t step 1d by SubscriptionGuid_g\\r\\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\\r\\n| where StartCost >= 0 and EndCost > {InstanceMinCost} and iif(GrowthFactor > 1, EndCost > (StartCost * GrowthFactor), iif(GrowthFactor < 1, EndCost < (StartCost * GrowthFactor), EndCost == StartCost)));\\r\\nlet ResourceGroupSeries = materialize(AzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage' and isnotempty(ResourceGroupName_s) and SubscriptionGuid_g in ({SelectedSubscriptions:value})\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by ResourceGroupName_s, UsageDate_t\\r\\n| order by UsageDate_t asc\\r\\n| make-series Cost=sum(InstanceCost) on UsageDate_t step 1d by ResourceGroupName_s\\r\\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\\r\\n| where StartCost >= 0 and EndCost > {InstanceMinCost} and iif(GrowthFactor > 1, EndCost > (StartCost * GrowthFactor), iif(GrowthFactor < 1, EndCost < (StartCost * GrowthFactor), EndCost == StartCost)));\\r\\nlet ResourceSeries = materialize(AzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage' and SubscriptionGuid_g in ({SelectedSubscriptions:value})\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by InstanceId_s, UsageDate_t\\r\\n| order by UsageDate_t asc\\r\\n| make-series Cost=sum(InstanceCost) on UsageDate_t step 1d by InstanceId_s\\r\\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\\r\\n| where StartCost >= 0 and EndCost > {InstanceMinCost} and iif(GrowthFactor > 1, EndCost > (StartCost * GrowthFactor), iif(GrowthFactor < 1, EndCost < (StartCost * GrowthFactor), EndCost == StartCost)));\\r\\nlet MeterCategorySeries = materialize(AzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage' and SubscriptionGuid_g in ({SelectedSubscriptions:value})\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by MeterCategory_s, UsageDate_t\\r\\n| order by UsageDate_t asc\\r\\n| make-series Cost=sum(InstanceCost) on UsageDate_t step 1d by MeterCategory_s\\r\\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\\r\\n| where StartCost >= 0 and EndCost > {InstanceMinCost} and iif(GrowthFactor > 1, EndCost > (StartCost * GrowthFactor), iif(GrowthFactor < 1, EndCost < (StartCost * GrowthFactor), EndCost == StartCost)));\\r\\nlet MeterSubCategorySeries = materialize(AzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage' and isnotempty(MeterSubCategory_s) and SubscriptionGuid_g in ({SelectedSubscriptions:value})\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by MeterSubCategory_s, UsageDate_t\\r\\n| order by UsageDate_t asc\\r\\n| make-series Cost=sum(InstanceCost) on UsageDate_t step 1d by MeterSubCategory_s\\r\\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\\r\\n| where StartCost >= 0 and EndCost > {InstanceMinCost} and iif(GrowthFactor > 1, EndCost > (StartCost * GrowthFactor), iif(GrowthFactor < 1, EndCost < (StartCost * GrowthFactor), EndCost == StartCost)));\\r\\nlet MeterNameSeries = materialize(AzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage' and SubscriptionGuid_g in ({SelectedSubscriptions:value})\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by MeterName_s, UsageDate_t\\r\\n| order by UsageDate_t asc\\r\\n| make-series Cost=sum(InstanceCost) on UsageDate_t step 1d by MeterName_s\\r\\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\\r\\n| where StartCost >= 0 and EndCost > {InstanceMinCost} and iif(GrowthFactor > 1, EndCost > (StartCost * GrowthFactor), iif(GrowthFactor < 1, EndCost < (StartCost * GrowthFactor), EndCost == StartCost)));\\r\\nSubscriptionSeries\\r\\n| extend outliers=series_decompose_anomalies(Cost, 1.5)\\r\\n| mvexpand outliers, UsageDate_t\\r\\n| summarize arg_max(todatetime(UsageDate_t), *) by SubscriptionGuid_g\\r\\n| where outliers == 1\\r\\n| extend SeriesType='Outliers', PerspectiveType = 'SubscriptionGuid_g', PerspectiveId = SubscriptionGuid_g\\r\\n| distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\\r\\n| union (\\r\\n    SubscriptionSeries\\r\\n    | extend SeriesType='Growing', PerspectiveType = 'SubscriptionGuid_g', PerspectiveId = SubscriptionGuid_g\\r\\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\\r\\n)\\r\\n| union ( \\r\\n    ResourceGroupSeries\\r\\n    | extend outliers=series_decompose_anomalies(Cost, 1.5)\\r\\n    | mvexpand outliers, UsageDate_t\\r\\n    | summarize arg_max(todatetime(UsageDate_t), *) by ResourceGroupName_s\\r\\n    | where outliers == 1\\r\\n    | extend SeriesType='Outliers', PerspectiveType = 'ResourceGroupName_s', PerspectiveId = ResourceGroupName_s\\r\\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\\r\\n)\\r\\n| union (\\r\\n    ResourceGroupSeries\\r\\n    | extend SeriesType='Growing', PerspectiveType = 'ResourceGroupName_s', PerspectiveId = ResourceGroupName_s\\r\\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\\r\\n)\\r\\n| union ( \\r\\n    ResourceSeries\\r\\n    | extend outliers=series_decompose_anomalies(Cost, 1.5)\\r\\n    | mvexpand outliers, UsageDate_t\\r\\n    | summarize arg_max(todatetime(UsageDate_t), *) by InstanceId_s\\r\\n    | where outliers == 1\\r\\n    | extend SeriesType='Outliers', PerspectiveType = 'InstanceId_s', PerspectiveId = InstanceId_s\\r\\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\\r\\n)\\r\\n| union (\\r\\n    ResourceSeries\\r\\n    | extend SeriesType='Growing', PerspectiveType = 'InstanceId_s', PerspectiveId = InstanceId_s\\r\\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\\r\\n)\\r\\n| union ( \\r\\n    MeterCategorySeries\\r\\n    | extend outliers=series_decompose_anomalies(Cost, 1.5)\\r\\n    | mvexpand outliers, UsageDate_t\\r\\n    | summarize arg_max(todatetime(UsageDate_t), *) by MeterCategory_s\\r\\n    | where outliers == 1\\r\\n    | extend SeriesType='Outliers', PerspectiveType = 'MeterCategory_s', PerspectiveId = MeterCategory_s\\r\\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\\r\\n)\\r\\n| union (\\r\\n    MeterCategorySeries\\r\\n    | extend SeriesType='Growing', PerspectiveType = 'MeterCategory_s', PerspectiveId = MeterCategory_s\\r\\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\\r\\n)\\r\\n| union ( \\r\\n    MeterSubCategorySeries\\r\\n    | extend outliers=series_decompose_anomalies(Cost, 1.5)\\r\\n    | mvexpand outliers, UsageDate_t\\r\\n    | summarize arg_max(todatetime(UsageDate_t), *) by MeterSubCategory_s\\r\\n    | where outliers == 1\\r\\n    | extend SeriesType='Outliers', PerspectiveType = 'MeterSubCategory_s', PerspectiveId = MeterSubCategory_s\\r\\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\\r\\n)\\r\\n| union (\\r\\n    MeterSubCategorySeries\\r\\n    | extend SeriesType='Growing', PerspectiveType = 'MeterSubCategory_s', PerspectiveId = MeterSubCategory_s\\r\\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\\r\\n)\\r\\n| union ( \\r\\n    MeterNameSeries\\r\\n    | extend outliers=series_decompose_anomalies(Cost, 1.5)\\r\\n    | mvexpand outliers, UsageDate_t\\r\\n    | summarize arg_max(todatetime(UsageDate_t), *) by MeterName_s\\r\\n    | where outliers == 1\\r\\n    | extend SeriesType='Outliers', PerspectiveType = 'MeterName_s', PerspectiveId = MeterName_s\\r\\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\\r\\n)\\r\\n| union (\\r\\n    MeterNameSeries\\r\\n    | extend SeriesType='Growing', PerspectiveType = 'MeterName_s', PerspectiveId = MeterName_s\\r\\n    | distinct PerspectiveId, SeriesType, PerspectiveType, StartCost, EndCost\\r\\n)\\r\\n| extend FirstCost = round(StartCost, 0), LastCost = round(EndCost, 0)\\r\\n| distinct PerspectiveId, PerspectiveType, FirstCost, LastCost\\r\\n| top {TopN} by iif(GrowthFactor >= 1, LastCost-FirstCost, FirstCost-LastCost) desc\",\"size\":1,\"title\":\"Top Growing/Outliers (daily costs)\",\"noDataMessage\":\"The query returned no results. Your costs do not have anomalies and are not growing given the conditions filters above.\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"CostTimeRange\",\"exportedParameters\":[{\"fieldName\":\"PerspectiveType\",\"parameterName\":\"SelectedPerspective\",\"parameterType\":1},{\"fieldName\":\"PerspectiveId\",\"parameterName\":\"SelectedPerspectiveId\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"name\":\"GrowingAndOutliers\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"AzureOptimizationConsumptionV1_CL\\r\\n| where {SelectedPerspective} in ('{SelectedPerspectiveId}') and TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize PerspectiveCost = sum(FinalCost) by bin(UsageDate_t, 1d)\\r\\n| render timechart\",\"size\":1,\"aggregation\":5,\"title\":\"Evolution over time (select growing/outlier cost)\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"CostTimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"name\":\"outliers\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let CostStartIndex = 1;\\r\\nlet ContributingInstances = AzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage'\\r\\n| where {SelectedPerspective} == '{SelectedPerspectiveId}'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by SubscriptionGuid_g, UsageDate_t\\r\\n| order by UsageDate_t asc\\r\\n| make-series Cost=sum(InstanceCost) on UsageDate_t step 1d by SubscriptionGuid_g\\r\\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\\r\\n| top {TopN} by iif({GrowthPercentage} >= 0, EndCost-StartCost, StartCost-EndCost)\\r\\n| project SubscriptionGuid_g;\\r\\nAzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage' and SubscriptionGuid_g in (ContributingInstances)\\r\\n| where {SelectedPerspective} == '{SelectedPerspectiveId}'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by bin(UsageDate_t, 1d), SubscriptionGuid_g\\r\\n| join kind=inner ( \\r\\n    AzureOptimizationResourceContainersV1_CL\\r\\n    | where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}')\\r\\n    | where ContainerType_s =~ 'microsoft.resources/subscriptions' \\r\\n    | extend SubscriptionName = ContainerName_s\\r\\n    | distinct SubscriptionGuid_g, SubscriptionName \\r\\n) on SubscriptionGuid_g \\r\\n| project-away SubscriptionGuid_g, SubscriptionGuid_g1\\r\\n| render timechart\",\"size\":1,\"aggregation\":5,\"title\":\"Top contributing subscriptions over time\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"CostTimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"name\":\"subscriptionDetails\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let CostStartIndex = 1;\\r\\nlet ContributingInstances = AzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage'\\r\\n| where {SelectedPerspective} == '{SelectedPerspectiveId}'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by ResourceGroupName_s, UsageDate_t\\r\\n| order by UsageDate_t asc\\r\\n| make-series Cost=sum(InstanceCost) on UsageDate_t step 1d by ResourceGroupName_s\\r\\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\\r\\n| top {TopN} by iif({GrowthPercentage} >= 0, EndCost-StartCost, StartCost-EndCost)\\r\\n| project ResourceGroupName_s;\\r\\nAzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage' and ResourceGroupName_s in (ContributingInstances)\\r\\n| where {SelectedPerspective} == '{SelectedPerspectiveId}'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by bin(UsageDate_t, 1d), ResourceGroupName_s\\r\\n| render timechart\",\"size\":1,\"aggregation\":5,\"title\":\"Top contributing resource groups over time\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"CostTimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"name\":\"resourceGroupDetails\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let CostStartIndex = 1;\\r\\nlet ContributingInstances = AzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage'\\r\\n| where {SelectedPerspective} == '{SelectedPerspectiveId}'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by InstanceId_s, UsageDate_t\\r\\n| order by UsageDate_t asc\\r\\n| make-series Cost=sum(InstanceCost) on UsageDate_t step 1d by InstanceId_s\\r\\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\\r\\n| top {TopN} by iif({GrowthPercentage} >= 0, EndCost-StartCost, StartCost-EndCost)\\r\\n| project InstanceId_s;\\r\\nAzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage' and InstanceId_s in (ContributingInstances)\\r\\n| where {SelectedPerspective} == '{SelectedPerspectiveId}'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by bin(UsageDate_t, 1d), InstanceName_s\\r\\n| render timechart\",\"size\":1,\"aggregation\":5,\"title\":\"Top contributing instances over time\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"CostTimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"name\":\"instanceDetails\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let CostStartIndex = 1;\\r\\nlet ContributingInstances = AzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage'\\r\\n| where {SelectedPerspective} == '{SelectedPerspectiveId}'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by MeterCategory_s, UsageDate_t\\r\\n| order by UsageDate_t asc\\r\\n| make-series Cost=sum(InstanceCost) on UsageDate_t step 1d by MeterCategory_s\\r\\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\\r\\n| top {TopN} by iif({GrowthPercentage} >= 0, EndCost-StartCost, StartCost-EndCost)\\r\\n| project MeterCategory_s;\\r\\nAzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage' and MeterCategory_s in (ContributingInstances)\\r\\n| where {SelectedPerspective} == '{SelectedPerspectiveId}'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by bin(UsageDate_t, 1d), MeterCategory_s\\r\\n| render timechart\",\"size\":1,\"aggregation\":5,\"title\":\"Top contributing meter categories over time\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"CostTimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"name\":\"meterCategoryDetails\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let CostStartIndex = 1;\\r\\nlet ContributingInstances = AzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage'\\r\\n| where {SelectedPerspective} == '{SelectedPerspectiveId}'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by MeterSubCategory_s, UsageDate_t\\r\\n| order by UsageDate_t asc\\r\\n| make-series Cost=sum(InstanceCost) on UsageDate_t step 1d by MeterSubCategory_s\\r\\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\\r\\n| top {TopN} by iif({GrowthPercentage} >= 0, EndCost-StartCost, StartCost-EndCost)\\r\\n| project MeterSubCategory_s;\\r\\nAzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage' and MeterSubCategory_s in (ContributingInstances)\\r\\n| where {SelectedPerspective} == '{SelectedPerspectiveId}'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by bin(UsageDate_t, 1d), MeterSubCategory_s\\r\\n| render timechart\",\"size\":1,\"aggregation\":5,\"title\":\"Top contributing meter subcategories over time\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"CostTimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"name\":\"meterSubCategoryDetails\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let CostStartIndex = 1;\\r\\nlet ContributingInstances = AzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage'\\r\\n| where {SelectedPerspective} == '{SelectedPerspectiveId}'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by MeterName_s, UsageDate_t\\r\\n| order by UsageDate_t asc\\r\\n| make-series Cost=sum(InstanceCost) on UsageDate_t step 1d by MeterName_s\\r\\n| extend StartCost = todouble(Cost[CostStartIndex]), EndCost = todouble(Cost[array_length(Cost)-1])\\r\\n| top {TopN} by iif({GrowthPercentage} >= 0, EndCost-StartCost, StartCost-EndCost)\\r\\n| project MeterName_s;\\r\\nAzureOptimizationConsumptionV1_CL\\r\\n| where TimeGenerated > datetime('{CostTimeRange:startISO}') and TimeGenerated < datetime('{CostTimeRange:endISO}') and ChargeType_s == 'Usage' and MeterName_s in (ContributingInstances)\\r\\n| where {SelectedPerspective} == '{SelectedPerspectiveId}'\\r\\n| extend FinalCost = iif('{CostOption}' == 'ActualCosts', todouble(Cost_s), todouble(UnitPrice_s) * todouble(Quantity_s))\\r\\n| summarize InstanceCost = sum(FinalCost) by bin(UsageDate_t, 1d), MeterName_s\\r\\n| render timechart\",\"size\":1,\"aggregation\":5,\"title\":\"Top contributing meter names over time\",\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"CostTimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"name\":\"meterNameDetails\"}],\"isLocked\":false}",
        "version": "1.0",
        "sourceId": "[parameters('workbookSourceId')]",
        "category": "[parameters('workbookType')]"
      }
    }
  ],
  "outputs": {
    "workbookId": {
      "type": "string",
      "value": "[resourceId( 'microsoft.insights/workbooks', parameters('workbookId'))]"
    }
  },
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
}